// All breakpoint mixins required for Cru branding
// v0.3

@mixin cru-media-breakpoint-down($var) {
  @if $cru-aem-media-queries != true {
    $var: $var - 1;
  }
  @media (max-width: $var) {
    @content;
  }
}

@mixin cru-media-breakpoint-between($var1, $var2) {
  @if $cru-aem-media-queries == true {
    $var1: $var1 + 1;
  } @else {
    $var2: $var2 - 1;
  }
  @media (min-width: $var1) and (max-width: $var2) {
    @content;
  }
}

@mixin cru-media-breakpoint-up($var) {
  @if $cru-aem-media-queries == true {
    $var: $var + 1;
  }
  @media (min-width: $var) {
    @content;
  }
}

@mixin cru-output-styles-from-map($map, $breakpoint-index) {
  @each $style-rule, $style-rule-vals in $map {
    @if map-has-key($style-rule-vals, $breakpoint-index) {
      #{$style-rule}: map-get($style-rule-vals, $breakpoint-index);
    }
  }
}

@mixin cru-responsive-styles($map) {
  @each $key, $width in $cru-breakpoints-values-indexed {
    @if $cru-aem-media-queries == true {
      @if $key == 1 {
        // Set desktop default
        @include cru-output-styles-from-map($map, map-get($cru-breakpoints-mapping-indexed, length($cru-breakpoints)));
      } @else if $key == 2 {
        // Set mobile
        @include cru-media-breakpoint-down($width) {
          @include cru-output-styles-from-map($map, $key - 1);
        }
      } @else {
        // Set breakpoint ranges larger than mobile
        @include cru-media-breakpoint-between(map-get($cru-breakpoints-values-indexed, $key - 1), $width) {
          @include cru-output-styles-from-map($map, map-get($cru-breakpoints-mapping-indexed, $key - 1));
        }
      }
    } @else {
      @if $key == 1 {
        // Set mobile default
        @include cru-output-styles-from-map($map, $key);
      } @else {
        // Set min-width media queries for additional breakpoints
        @include cru-media-breakpoint-up($width) {
          @include cru-output-styles-from-map($map, map-get($cru-breakpoints-mapping-indexed, $key));
        }
      }
    }
  }
}
